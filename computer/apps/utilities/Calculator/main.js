var stack = []; function updateStack() { "use strict"; var stackEntry; var textNode; var stackIndex; for (var i = 1; i <= 5; i += 1) { stackEntry = document.getElementById("stack-entry-" + i); textNode = stackEntry.lastChild; if (textNode) { stackEntry.removeChild(textNode); } stackIndex = i - 1; if (stack[stackIndex]) { textNode = document.createTextNode(stack[stackIndex]); stackEntry.appendChild(textNode); } } } function hexNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift("0x" + Number(topOfStack).toString(16)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function decNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(Number(topOfStack).toString(10)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function octNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift("0o" + Number(topOfStack).toString(8)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function binNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift("0b" + Number(topOfStack).toString(2)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function arctan2Numbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(Math.atan2( Number(secondInStack), Number(topOfStack))); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function arctanNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift(Math.atan(Number(topOfStack))); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function arccosNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift(Math.acos(Number(topOfStack))); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function arcsinNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift(Math.asin(Number(topOfStack))); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function numberPi(event) { "use strict"; var topOfStack; var secondInStack; try { stack.unshift(Math.PI); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function tanNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift(Math.tan(Number(topOfStack))); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function cosNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift(Math.cos(Number(topOfStack))); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function sinNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift(Math.sin(Number(topOfStack))); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function powerENumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift(Math.pow(Math.E, Number(topOfStack))); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function lnNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift(Math.log(Number(topOfStack))); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function power10Number(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift(Math.pow(10, Number(topOfStack))); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function logNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift(Math.log(Number(topOfStack)) / Math.LN10); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function inverseNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift(1.0 / Number(topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function powerNumbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(Math.pow(Number(topOfStack), Number(secondInStack))); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function squareNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift(Math.pow(Number(topOfStack), 2.0)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function sqrtNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); stack.unshift(Math.sqrt(Number(topOfStack))); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function divideNumbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(Number(secondInStack) / Number(topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function multiplyNumbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(Number(topOfStack) * Number(secondInStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function subtractNumbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(Number(secondInStack) - Number(topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function addNumbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(Number(topOfStack) + Number(secondInStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function overNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(secondInStack); stack.unshift(topOfStack); stack.unshift(secondInStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function dupNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(topOfStack); stack.unshift(topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function swapNumbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(topOfStack); stack.unshift(secondInStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function dropNumber(event) { "use strict"; try { stack.shift(); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function enterNumber(event) { "use strict"; var numberInput; try { numberInput = document.getElementById("number-input"); stack.unshift(numberInput.value); updateStack(); numberInput.value = ""; } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function setFunctonForButton(buttonName, eventFunction) { var buttonElement = document.getElementById(buttonName); buttonElement.addEventListener("click", eventFunction); } function init() { "use strict"; setFunctonForButton("submit-button", enterNumber); setFunctonForButton("drop-button", dropNumber); setFunctonForButton("swap-button", swapNumbers); setFunctonForButton("dup-button", dupNumber); setFunctonForButton("over-button", overNumber); setFunctonForButton("add-button", addNumbers); setFunctonForButton("subtract-button", subtractNumbers); setFunctonForButton("multiply-button", multiplyNumbers); setFunctonForButton("divide-button", divideNumbers); setFunctonForButton("sqrt-button", sqrtNumber); setFunctonForButton("square-button", squareNumber); setFunctonForButton("power-button", powerNumbers); setFunctonForButton("inverse-button", inverseNumber); setFunctonForButton("log-button", logNumber); setFunctonForButton("power-ten-button", power10Number); setFunctonForButton("ln-button", lnNumber); setFunctonForButton("power-e-button", powerENumber); setFunctonForButton("sin-button", sinNumber); setFunctonForButton("cos-button", cosNumber); setFunctonForButton("tan-button", tanNumber); setFunctonForButton("pi-button", numberPi); setFunctonForButton("arcsin-button", arcsinNumber); setFunctonForButton("arccos-button", arccosNumber); setFunctonForButton("arctan-button", arctanNumber); setFunctonForButton("arctan2-button", arctan2Numbers); setFunctonForButton("bin-button", binNumber); setFunctonForButton("oct-button", octNumber); setFunctonForButton("dec-button", decNumber); setFunctonForButton("hex-button", hexNumber); } window.addEventListener("load", init); 