var stack = []; var POUNDS_PER_KILOGRAM = 2.20462262185; var KILOMETRES_PER_MILE = 1.609344; var LITRES_PER_GALLON = 3.785411784; var ACRES_PER_HECTARE = 2.47105381; var FEET_PER_METRE = 3.2808398950131; var KILOMETRES_PER_MILE = 1.609344; var MILLILITRES_PER_OUNCE = 29.5735296875; var LITRES_PER_GALLON = 3.7854; var GRAMS_PER_OUNCE = 28.34952; var POUNDS_PER_KILOGRAM = 2.2046226218488; var KILOPASCALS_PER_POUNDS_PER_SQUARE = 6.8947573; function setFocusToNumberInput(){ document.getElementById("number-input").focus(); } function convertNumberStringToFloat(numberString) { "use strict"; var number; if (numberString.startsWith("0b")) { number = parseInt(numberString.substr(2), 2); } else if (numberString.startsWith("0o")) { number = parseInt(numberString.substr(2), 8); } else if (numberString.startsWith("0x")) { number = parseInt(numberString.substr(2), 16); } else { number = parseFloat(numberString); } return number; } function updateStack() { "use strict"; var stackEntry; var textNode; var stackIndex; for (var i = 1; i <= 5; i += 1) { stackEntry = document.getElementById("stack-entry-" + i); textNode = stackEntry.lastChild; if (textNode) { stackEntry.removeChild(textNode); } stackIndex = i - 1; if (stack[stackIndex] !== undefined) { textNode = document.createTextNode(stack[stackIndex]); stackEntry.appendChild(textNode); } } setFocusToNumberInput(); } function mpgToLp100kmNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(100 * LITRES_PER_GALLON / KILOMETRES_PER_MILE / topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function lp100kmToMpgNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(100 * LITRES_PER_GALLON / KILOMETRES_PER_MILE / topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function psiToKpaNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(KILOPASCALS_PER_POUNDS_PER_SQUARE * topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function kpaToPsiNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(topOfStack / KILOPASCALS_PER_POUNDS_PER_SQUARE); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function lbToKgNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(topOfStack / POUNDS_PER_KILOGRAM); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function kgToLbNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(POUNDS_PER_KILOGRAM * topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function ozToGNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(GRAMS_PER_OUNCE * topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function gToOzNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(topOfStack / GRAMS_PER_OUNCE); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function galToLNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(LITRES_PER_GALLON * topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function lToGalNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(topOfStack / LITRES_PER_GALLON); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function ozToMlNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(MILLILITRES_PER_OUNCE * topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function mlToOzNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(topOfStack / MILLILITRES_PER_OUNCE); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function miToKmNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(KILOMETRES_PER_MILE * topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function kmToMiNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(topOfStack / KILOMETRES_PER_MILE); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function ftToMNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(topOfStack / FEET_PER_METRE); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function mToFtNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(FEET_PER_METRE * topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function acToHaNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(topOfStack / ACRES_PER_HECTARE); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function haToAcNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(ACRES_PER_HECTARE * topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function fToCNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(5.0 * (topOfStack - 32.0) / 9.0); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function cToFNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(9.0 * topOfStack / 5.0 + 32.0); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function hexNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift("0x" + convertNumberStringToFloat(topOfStack.toString()).toString(16)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function decNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(convertNumberStringToFloat(topOfStack.toString()).toString(10)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function octNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift("0o" + convertNumberStringToFloat(topOfStack.toString()).toString(8)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function binNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift("0b" + convertNumberStringToFloat(topOfStack.toString()).toString(2)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function arctan2Numbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(Math.atan2(secondInStack, topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function arctanNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(Math.atan(topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function arccosNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(Math.acos(topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function arcsinNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(Math.asin(topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function numberPi(event) { "use strict"; try { stack.unshift(Math.PI); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function tanNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(Math.tan(topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function cosNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(Math.cos(topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function sinNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(Math.sin(topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function powerENumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(Math.pow(Math.E, topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function lnNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(Math.log(topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function power10Number(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(Math.pow(10, topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function logNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(Math.log(topOfStack) / Math.LN10); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function inverseNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(1.0 / topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function powerNumbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(Math.pow(topOfStack, secondInStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function squareNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(Math.pow(topOfStack, 2.0)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function sqrtNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(Math.sqrt(topOfStack)); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function divideNumbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(secondInStack / topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function multiplyNumbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(topOfStack * secondInStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function subtractNumbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(secondInStack - topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function addNumbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(topOfStack + secondInStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function overNumber(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(secondInStack); stack.unshift(topOfStack); stack.unshift(secondInStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function dupNumber(event) { "use strict"; var topOfStack; try { topOfStack = stack.shift(); stack.unshift(topOfStack); stack.unshift(topOfStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function swapNumbers(event) { "use strict"; var topOfStack; var secondInStack; try { topOfStack = stack.shift(); secondInStack = stack.shift(); stack.unshift(topOfStack); stack.unshift(secondInStack); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function dropNumber(event) { "use strict"; try { stack.shift(); updateStack(); } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function enterNumber(event) { "use strict"; var numberInput; var number; try { numberInput = document.getElementById("number-input"); if (numberInput.value !== "") { number = convertNumberStringToFloat(numberInput.value); if (isNaN(number)) { stack.unshift("NaN"); } else { stack.unshift(number); } updateStack(); } numberInput.value = ""; } catch (exception) { console.log(exception); } event.preventDefault(); return false; } function setFunctonForButton(buttonName, eventFunction) { var buttonElement = document.getElementById(buttonName); buttonElement.addEventListener("click", eventFunction); } function init() { "use strict"; setFunctonForButton("submit-button", enterNumber); setFunctonForButton("drop-button", dropNumber); setFunctonForButton("swap-button", swapNumbers); setFunctonForButton("dup-button", dupNumber); setFunctonForButton("over-button", overNumber); setFunctonForButton("add-button", addNumbers); setFunctonForButton("subtract-button", subtractNumbers); setFunctonForButton("multiply-button", multiplyNumbers); setFunctonForButton("divide-button", divideNumbers); setFunctonForButton("sqrt-button", sqrtNumber); setFunctonForButton("square-button", squareNumber); setFunctonForButton("power-button", powerNumbers); setFunctonForButton("inverse-button", inverseNumber); setFunctonForButton("log-button", logNumber); setFunctonForButton("power-ten-button", power10Number); setFunctonForButton("ln-button", lnNumber); setFunctonForButton("power-e-button", powerENumber); setFunctonForButton("sin-button", sinNumber); setFunctonForButton("cos-button", cosNumber); setFunctonForButton("tan-button", tanNumber); setFunctonForButton("pi-button", numberPi); setFunctonForButton("arcsin-button", arcsinNumber); setFunctonForButton("arccos-button", arccosNumber); setFunctonForButton("arctan-button", arctanNumber); setFunctonForButton("arctan2-button", arctan2Numbers); setFunctonForButton("bin-button", binNumber); setFunctonForButton("oct-button", octNumber); setFunctonForButton("dec-button", decNumber); setFunctonForButton("hex-button", hexNumber); setFunctonForButton("c-to-f-button", cToFNumber); setFunctonForButton("f-to-c-button", fToCNumber); setFunctonForButton("ha-to-ac-button", haToAcNumber); setFunctonForButton("ac-to-ha-button", acToHaNumber); setFunctonForButton("m-to-ft-button", mToFtNumber); setFunctonForButton("ft-to-m-button", ftToMNumber); setFunctonForButton("km-to-mi-button", kmToMiNumber); setFunctonForButton("mi-to-km-button", miToKmNumber); setFunctonForButton("ml-to-oz-button", mlToOzNumber); setFunctonForButton("oz-to-ml-button", ozToMlNumber); setFunctonForButton("l-to-gal-button", lToGalNumber); setFunctonForButton("gal-to-l-button", galToLNumber); setFunctonForButton("g-to-oz-button", gToOzNumber); setFunctonForButton("oz-to-g-button", ozToGNumber); setFunctonForButton("kg-to-lb-button", kgToLbNumber); setFunctonForButton("lb-to-kg-button", lbToKgNumber); setFunctonForButton("kpa-to-psi-button", kpaToPsiNumber); setFunctonForButton("psi-to-kpa-button", psiToKpaNumber); setFunctonForButton("lp100km-to-mpg-button", lp100kmToMpgNumber); setFunctonForButton("mpg-to-lp100km-button", mpgToLp100kmNumber); } window.addEventListener("load", init); 